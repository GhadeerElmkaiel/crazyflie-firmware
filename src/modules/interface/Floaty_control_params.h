#include <stdint.h>
#include <stdlib.h>
#include "controller_floaty.h"


// ====================== Pos Err Int matrix ======================

// const float pos_I_matrix[4][3] ={
//         {0,    -0.1,    0},
//         {0,    -0.1,    0},
//         {0,     0.1,    0},
//         {0,     0.1,    0}
// };


const float u_vector[4][4] ={
        {-1, -1, -1, -1},
        { 1, -1,  1, -1},
        { 1,  1, -1, -1},
        {-1,  1,  1, -1}
};

// ---------------------------------------- Hover Angle 17.5 degrees ----------------------------------------

// ---------------------------------------- Best General controller ----------------------------------------
// static float P_vector[F_ERR_DIM] = {-0.400,   0.400,   0.950,  -0.350,   0.300,   0.650,  -0.450,  -0.100,   0.360,  -0.020,  -0.050,   0.100,   0.000,   0.000,   0.000,   0.000};
// ---------------------------------------- Good only roll controller ----------------------------------------
// static float P_vector[F_ERR_DIM] = {-0.000,   0.000,   0.000,  -0.000,   0.000,   0.000,  -0.900,  -0.000,   0.000,  -0.065,  -0.000,   0.000,   0.000,   0.000,   0.000,   0.000};

// ---------------------------------------- Not bad controller with Switching ----------------------------------------
// static float P_vector[F_ERR_DIM] = {-1.000,   1.500,   1.000,  -0.200,   0.350,   0.3,  -0.500,  -0.000,   0.200,  -0.050,  -0.0,   0.030,   0.000,   0.000,   0.000,   0.000};



// ---------------------------------------- Good but aggressive Zieglerâ€“Nichols method ----------------------------------------
// static float P_vector[F_ERR_DIM] = {-0.400,   0.400,   0.950,  -0.400,   0.400,   0.650,  -0.900,  -0.100,   0.360,  -0.060,  -0.050,   0.100,   0.000,   0.000,   0.000,   0.000};

// static float P_vector[F_ERR_DIM] = {-1.200,   3.400,   0.950,  -0.300,   0.450,   0.650,  -0.500,  -0.100,   0.300,  -0.050,  -0.050,   0.080,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-3.000,   3.500,   2.000,  -0.200,   0.350,   1.3,  -0.500,  -0.000,   0.200,  -0.050,  -0.0,   0.030,   0.000,   0.000,   0.000,   0.000};

// ---------------------------------------- Position Control ----------------------------------------
// static float P_vector[F_ERR_DIM] = {-1.200,   2.400,   2.000,  -0.300,   0.300,   1.000,  -0.500,  -0.000,   0.200,  -0.040,  -0.0,   0.06,   0.000,   0.000,   0.000,   0.000};

// static float P_vector[F_ERR_DIM] = {-0.000,   0.500,   4.500,  -0.000,   0.500,   0.800,  -0.500,  -0.000,   0.200,  -0.060,  -0.0,   0.06,   0.000,   0.000,   0.000,   0.000};

// Working for floaty V2
// static float P_vector[F_ERR_DIM] = {-3.400,   3.400,   4.500,  -0.500,   0.500,   0.800,  -0.500,  -0.000,   0.200,  -0.000,  -0.000,   0.050,   0.000,   0.000,   0.000,   0.000};

// For floaty V2
// static float P_vector[F_ERR_DIM] = {-3.000,   3.000,   3.000,  -1.000,   1.000,   0.800,  -0.900,  -0.900,   0.200,  -0.400,  -0.400,   0.090,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-0.000,   0.000,   3.000,  -1.000,   1.000,   0.800,  -0.900,  -0.900,   0.500,  -0.300,  -0.300,   0.090,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-3.000,   3.000,   3.000,  -0.000,   0.000,   0.800,  -0.000,  -0.000,   0.000,  -0.000,  -0.000,   0.000,   0.000,   0.000,   0.000,   0.000};
// Tuned using Sys ID
static float P_vector[F_ERR_DIM] = {-3.000,   3.000,   3.000,  -1.250,   1.250,   1.000,  -0.500,  -0.500,   0.800,  -1.070,  -1.070,   0.200,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-3.000,   3.000,   3.000,  -1.200,   1.200,   0.800,  -3.100,  -3.100,   0.500,  -1.200,  -1.200,   0.090,   0.000,   0.000,   0.000,   0.000};


// static float P_vector[F_ERR_DIM] = {-0.000,   0.000,   0.950,  -0.000,   0.000,   0.650,  -0.450,  -0.100,   0.300,  -0.020,  -0.050,   0.080,   0.000,   0.000,   0.000,   0.000};


// static float P_vector[F_ERR_DIM] = {-0.400,   0.400,   2.000,  -0.350,   0.300,   1.3,  -0.450,  -0.100,   0.090,  -0.020,  -0.050,   0.025,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-0.400,   0.400,   2.000,  -0.400,   0.400,   1.30,  -0.900,  -0.100,   0.090,  -0.060,  -0.050,   0.025,   0.000,   0.000,   0.000,   0.000};
// static float P_vector[F_ERR_DIM] = {-0.000,   1.600,   2.000,  -0.000,   0.400,   1.30,  -0.000,  -0.000,   0.090,  -0.000,  -0.000,   0.025,   0.000,   0.000,   0.000,   0.000};


// const float P_vector[F_ERR_DIM] = {-0.000,   0.000,   0.950,  -0.000,   0.000,   0.650,  -0.450,  -0.100,   0.360,  -0.020,  -0.050,   0.100,   0.000,   0.000,   0.000,   0.000};
// const float P_vector[F_ERR_DIM] = {-0.000,   0.000,   0.000,  -0.000,   0.000,   0.000,  -0.000,  -0.000,   0.000,  -0.020,  -0.000,   0.000,   0.000,   0.000,   0.000,   0.000};
// const float P_vector[F_ERR_DIM] = {-0.000,   0.000,   0.000,  -0.000,   0.000,   0.000,  -0.000,  -0.000,   0.000,  -0.000,  -0.000,   0.000,   0.000,   0.000,   0.000,   0.000};

// const float D_vector[F_ERR_DIM] = { 0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  -0.0004,  0.000,   0.000,   0.000,   0.000,   0.000,   0.000};
const float D_vector[F_ERR_DIM] = { 0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  -0.0000,  0.000,   0.000,   0.000,   0.000,   0.000,   0.000};

const float I_vector[F_ERR_DIM] = { 0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  -0.0000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000};

// static float rool_r_P = 0.45;
// static float roll_r_I = 0.0;
// static float roll_r_D = 0.0;